/**
 * Generated by orval v6.19.1 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { useMutation } from "@tanstack/react-query"
import type {
  MutationFunction,
  UseMutationOptions
} from "@tanstack/react-query"

import { customAxios } from "../../client"
import type { ErrorType } from "../../client"
import type {
  DocsUploadOutSchema,
  HTTPValidationError,
  UploadUploadCodeParams
} from ".././schemas"

/**
 * @summary Upload Code
 */
export const uploadUploadCode = (params: UploadUploadCodeParams) => {
  return customAxios<DocsUploadOutSchema>({
    url: `/uploaddocs/`,
    method: "post",
    params
  })
}

export const getUploadUploadCodeMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadUploadCode>>,
    TError,
    { params: UploadUploadCodeParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof uploadUploadCode>>,
  TError,
  { params: UploadUploadCodeParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadUploadCode>>,
    { params: UploadUploadCodeParams }
  > = (props) => {
    const { params } = props ?? {}

    return uploadUploadCode(params)
  }

  return { mutationFn, ...mutationOptions }
}

export type UploadUploadCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadUploadCode>>
>

export type UploadUploadCodeMutationError = ErrorType<HTTPValidationError>

/**
 * @summary Upload Code
 */
export const useUploadUploadCode = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadUploadCode>>,
    TError,
    { params: UploadUploadCodeParams },
    TContext
  >
}) => {
  const mutationOptions = getUploadUploadCodeMutationOptions(options)

  return useMutation(mutationOptions)
}

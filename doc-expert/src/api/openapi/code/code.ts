/**
 * Generated by orval v6.19.1 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { useInfiniteQuery, useQuery } from "@tanstack/react-query"
import type {
  InfiniteData,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from "@tanstack/react-query"

import { customAxios } from "../../client"
import type { ErrorType } from "../../client"
import type { CodeGetFileParams, HTTPValidationError } from ".././schemas"

/**
 * @summary Get File
 */
export const codeGetFile = (
  params: CodeGetFileParams,
  signal?: AbortSignal
) => {
  return customAxios<unknown>({ url: `/code/`, method: "get", params, signal })
}

export const getCodeGetFileQueryKey = (params: CodeGetFileParams) => {
  return [`/code/`, ...(params ? [params] : [])] as const
}

export const getCodeGetFileInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof codeGetFile>>,
    CodeGetFileParams["cursor"]
  >,
  TError = ErrorType<HTTPValidationError>
>(
  params: CodeGetFileParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof codeGetFile>>,
        TError,
        TData,
        Awaited<ReturnType<typeof codeGetFile>>,
        QueryKey,
        CodeGetFileParams["cursor"]
      >
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCodeGetFileQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof codeGetFile>>,
    QueryKey,
    CodeGetFileParams["cursor"]
  > = ({ signal, pageParam }) =>
    codeGetFile({ cursor: pageParam, ...params }, signal)

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof codeGetFile>>,
    TError,
    TData,
    Awaited<ReturnType<typeof codeGetFile>>,
    QueryKey,
    CodeGetFileParams["cursor"]
  > & { queryKey: QueryKey }
}

export type CodeGetFileInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof codeGetFile>>
>
export type CodeGetFileInfiniteQueryError = ErrorType<HTTPValidationError>

/**
 * @summary Get File
 */
export const useCodeGetFileInfinite = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof codeGetFile>>,
    CodeGetFileParams["cursor"]
  >,
  TError = ErrorType<HTTPValidationError>
>(
  params: CodeGetFileParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof codeGetFile>>,
        TError,
        TData,
        Awaited<ReturnType<typeof codeGetFile>>,
        QueryKey,
        CodeGetFileParams["cursor"]
      >
    >
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getCodeGetFileInfiniteQueryOptions(params, options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getCodeGetFileQueryOptions = <
  TData = Awaited<ReturnType<typeof codeGetFile>>,
  TError = ErrorType<HTTPValidationError>
>(
  params: CodeGetFileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof codeGetFile>>, TError, TData>
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCodeGetFileQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof codeGetFile>>> = ({
    signal
  }) => codeGetFile(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof codeGetFile>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type CodeGetFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof codeGetFile>>
>
export type CodeGetFileQueryError = ErrorType<HTTPValidationError>

/**
 * @summary Get File
 */
export const useCodeGetFile = <
  TData = Awaited<ReturnType<typeof codeGetFile>>,
  TError = ErrorType<HTTPValidationError>
>(
  params: CodeGetFileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof codeGetFile>>, TError, TData>
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getCodeGetFileQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

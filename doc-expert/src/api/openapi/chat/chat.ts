/**
 * Generated by orval v6.19.1 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { useMutation } from "@tanstack/react-query"
import type {
  MutationFunction,
  UseMutationOptions
} from "@tanstack/react-query"

import { customAxios } from "../../client"
import type { ErrorType } from "../../client"
import type {
  ChatInSchema,
  ChatResponse,
  HTTPValidationError
} from ".././schemas"

/**
 * @summary Send Message
 */
export const chatSendMessage = (chatInSchema: ChatInSchema) => {
  return customAxios<ChatResponse>({
    url: `/chat/`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: chatInSchema
  })
}

export const getChatSendMessageMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatSendMessage>>,
    TError,
    { data: ChatInSchema },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof chatSendMessage>>,
  TError,
  { data: ChatInSchema },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof chatSendMessage>>,
    { data: ChatInSchema }
  > = (props) => {
    const { data } = props ?? {}

    return chatSendMessage(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type ChatSendMessageMutationResult = NonNullable<
  Awaited<ReturnType<typeof chatSendMessage>>
>
export type ChatSendMessageMutationBody = ChatInSchema
export type ChatSendMessageMutationError = ErrorType<HTTPValidationError>

/**
 * @summary Send Message
 */
export const useChatSendMessage = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatSendMessage>>,
    TError,
    { data: ChatInSchema },
    TContext
  >
}) => {
  const mutationOptions = getChatSendMessageMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Send Message Stream
 */
export const chatSendMessageStream = (chatInSchema: ChatInSchema) => {
  return customAxios<unknown>({
    url: `/chat-stream/`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: chatInSchema
  })
}

export const getChatSendMessageStreamMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatSendMessageStream>>,
    TError,
    { data: ChatInSchema },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof chatSendMessageStream>>,
  TError,
  { data: ChatInSchema },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof chatSendMessageStream>>,
    { data: ChatInSchema }
  > = (props) => {
    const { data } = props ?? {}

    return chatSendMessageStream(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type ChatSendMessageStreamMutationResult = NonNullable<
  Awaited<ReturnType<typeof chatSendMessageStream>>
>
export type ChatSendMessageStreamMutationBody = ChatInSchema
export type ChatSendMessageStreamMutationError = ErrorType<HTTPValidationError>

/**
 * @summary Send Message Stream
 */
export const useChatSendMessageStream = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatSendMessageStream>>,
    TError,
    { data: ChatInSchema },
    TContext
  >
}) => {
  const mutationOptions = getChatSendMessageStreamMutationOptions(options)

  return useMutation(mutationOptions)
}

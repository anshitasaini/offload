/**
 * Generated by orval v6.19.1 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { useInfiniteQuery, useQuery } from "@tanstack/react-query"
import type {
  InfiniteData,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from "@tanstack/react-query"

import { customAxios } from "../../client"
import type { ErrorType } from "../../client"

/**
 * @summary Main
 */
export const rootMain = (signal?: AbortSignal) => {
  return customAxios<unknown>({ url: `/`, method: "get", signal })
}

export const getRootMainQueryKey = () => {
  return [`/`] as const
}

export const getRootMainInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof rootMain>>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof rootMain>>, TError, TData>
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getRootMainQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rootMain>>> = ({
    signal
  }) => rootMain(signal)

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof rootMain>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type RootMainInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof rootMain>>
>
export type RootMainInfiniteQueryError = ErrorType<unknown>

/**
 * @summary Main
 */
export const useRootMainInfinite = <
  TData = InfiniteData<Awaited<ReturnType<typeof rootMain>>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof rootMain>>, TError, TData>
  >
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getRootMainInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getRootMainQueryOptions = <
  TData = Awaited<ReturnType<typeof rootMain>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof rootMain>>, TError, TData>
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getRootMainQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rootMain>>> = ({
    signal
  }) => rootMain(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof rootMain>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type RootMainQueryResult = NonNullable<
  Awaited<ReturnType<typeof rootMain>>
>
export type RootMainQueryError = ErrorType<unknown>

/**
 * @summary Main
 */
export const useRootMain = <
  TData = Awaited<ReturnType<typeof rootMain>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof rootMain>>, TError, TData>
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getRootMainQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
